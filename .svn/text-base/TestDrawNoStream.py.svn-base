import curses
import threading
from Cube import Cube
from ThreeD import RotationMatrix

turns = []

class MyThread (threading.Thread):
    def __init__(self):
        threading.Thread.__init__(self)
        
    def run(self):
        global turns
        infile = open('turnstream', 'r')
        self.running = True
        while self.running:
            turns.append(infile.readline())
        

def main(screen):
    global turns
    import ThreeD.Graphics2D as g2d # Fix later
    from ThreeD.Canvas3D import Canvas3D
    
    try:
        curses.curs_set(0)
    except:
        pass
    curses.start_color()
    
    screen.bkgd(' ', g2d.white)

    cube = Cube()
    cube.rotate(RotationMatrix.RotationMatrix().setRotation(1, -45))
    cube.rotate(RotationMatrix.RotationMatrix().setRotation(0, 37))
    canvas = Canvas3D()
    canvas.add_polys(cube.polygons())
    canvas.offset_z += 8
    canvas.scale += 7
    
#    g2d.draw_line(screen, (0,0), (10,5))
    screen.refresh()
    screen.timeout(0)

    read_thread = MyThread()
    
    while 1:        
        ch = screen.getch()
        MOVE_AWAY = '<'
        MOVE_CLOSER = '>'
        ZOOM_OUT = ','
        ZOOM_IN = '.'
        RESET_VIEW = '1'
        QUIT = '`'
        if ch == ord(QUIT):
            break
        elif ch == curses.KEY_LEFT:
            cube.rotate(RotationMatrix.RotationMatrix().setRotation(1, -30./10))
        elif ch == curses.KEY_RIGHT:
            cube.rotate(RotationMatrix.RotationMatrix().setRotation(1, 30./10))
        elif ch == curses.KEY_UP:
            cube.rotate(RotationMatrix.RotationMatrix().setRotation(0, -30./10))
        elif ch == curses.KEY_DOWN:
            cube.rotate(RotationMatrix.RotationMatrix().setRotation(0, 30./10))
        elif ch == ord(RESET_VIEW):
            cube.rotate(None)
        elif ch == ord(MOVE_AWAY):
            canvas.offset_z += .5
        elif ch == ord(MOVE_CLOSER):
            canvas.offset_z -= .5
        elif ch == ord(ZOOM_IN):
            canvas.scale += .1
        elif ch == ord(ZOOM_OUT):
            canvas.scale -= .1
        elif ch != -1:
            cube.char_pressed(chr(ch))
        
        screen.erase()
        cube.tick()
        canvas.draw(screen)
        screen.addstr(15, 15, "zoom in " + ZOOM_IN)
        screen.addstr(16, 15, "zoom out " + ZOOM_OUT)
        screen.addstr(17, 15, "move away " + MOVE_AWAY)
        screen.addstr(18, 15, "move closer " + MOVE_CLOSER)
        screen.addstr(19, 15, "reset view " + RESET_VIEW)
        screen.addstr(20, 15, "quit " + QUIT)
        screen.addstr(22, 15, "is solved? " + str(cube.is_solved()))

#        if len(turns) != 0:
#            for move in turns:
#                cube.do_turn(move)
#            turns = []
    
    #TODO - why won't the thread die?
#    read_thread.running = False
#    import sys
#    sys.exit(1)


if __name__ == '__main__':
    curses.wrapper(main)
